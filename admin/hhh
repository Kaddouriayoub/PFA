<?php
// manage_seances.php
session_start();

// Database connection
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "ensias_payment";

try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname;charset=utf8mb4", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}

// Check authentication
if (!isset($_SESSION['user_id'])) {
    header("Location: index.php");
    exit;
}

if ($_SESSION['role'] != 'admin') {
    header("Location: index.php?error=access_denied");
    exit;
}

// Function to check monthly session limit
function checkMonthlyLimit($conn, $id_prof, $date_seance) {
    $month = date('Y-m', strtotime($date_seance));
    $firstDay = $month . '-01';
    $lastDay = date('Y-m-t', strtotime($firstDay));
    
    $stmt = $conn->prepare("
        SELECT COUNT(*) as count_seances 
        FROM Seance_Reelle 
        WHERE id_prof = ? AND date_seance BETWEEN ? AND ?
    ");
    $stmt->execute([$id_prof, $firstDay, $lastDay]);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    
    return $result['count_seances'];
}

// Function to get professor's monthly stats
function getProfessorMonthlyStats($conn, $id_prof, $date_seance) {
    $month = date('Y-m', strtotime($date_seance));
    $firstDay = $month . '-01';
    $lastDay = date('Y-m-t', strtotime($firstDay));
    
    $stmt = $conn->prepare("
        SELECT 
            COUNT(*) as total_seances,
            SUM(CASE WHEN type_seance = 'Cours' THEN 1 ELSE 0 END) as cours_count,
            SUM(CASE WHEN type_seance = 'TD' THEN 1 ELSE 0 END) as td_count,
            SUM(CASE WHEN type_seance = 'TP' THEN 1 ELSE 0 END) as tp_count
        FROM Seance_Reelle 
        WHERE id_prof = ? AND date_seance BETWEEN ? AND ?
    ");
    $stmt->execute([$id_prof, $firstDay, $lastDay]);
    
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

function checkDailyLimit($conn, $id_prof, $date_seance) {
    $stmt = $conn->prepare("
        SELECT COUNT(*) as count_seances 
        FROM Seance_Reelle 
        WHERE id_prof = ? AND date_seance = ?
    ");
    $stmt->execute([$id_prof, $date_seance]);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    
    return $result['count_seances'];
}

// Handle AJAX requests
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    header('Content-Type: application/json');
    
    try {
        switch ($_POST['action']) {
            case 'check_monthly_limit':
                $id_prof = intval($_POST['id_prof']);
                $date_seance = $_POST['date_seance'];
                
                if ($id_prof <= 0 || empty($date_seance)) {
                    echo json_encode(['success' => false, 'message' => 'Paramètres manquants']);
                    exit;
                }
                
                $currentCount = checkMonthlyLimit($conn, $id_prof, $date_seance);
                $stats = getProfessorMonthlyStats($conn, $id_prof, $date_seance);
                $monthName = date('F Y', strtotime($date_seance));
                
                echo json_encode([
                    'success' => true, 
                    'current_count' => $currentCount,
                    'limit_reached' => $currentCount >= 20,
                    'remaining' => max(0, 20 - $currentCount),
                    'month' => $monthName,
                    'stats' => $stats
                ]);
                exit;
            
            case 'check_daily_limit':
                $id_prof = intval($_POST['id_prof']);
                $date_seance = $_POST['date_seance'];
                
                if ($id_prof <= 0 || empty($date_seance)) {
                    echo json_encode(['success' => false, 'message' => 'Paramètres manquants']);
                    exit;
                }
                
                $dailyCount = checkDailyLimit($conn, $id_prof, $date_seance);
                $dateFormatted = date('d/m/Y', strtotime($date_seance));
                
                echo json_encode([
                    'success' => true, 
                    'daily_count' => $dailyCount,
                    'daily_limit_reached' => $dailyCount >= 4,
                    'daily_remaining' => max(0, 4 - $dailyCount),
                    'date_formatted' => $dateFormatted
                ]);
                exit;
            
                case 'get_seances_by_prof':
                    $stmt = $conn->prepare("
                        SELECT sr.id_seance, sr.date_seance, sr.type_seance, sr.statut,
                                p.id_prof, p.nom AS prof_nom, p.prenom AS prof_prenom,
                                em.nom_element, m.nom_module,
                                s.nom_semestre, a.annee_universitaire, a.niveau, f.nom_filiere
                        FROM Seance_Reelle sr
                        JOIN Professeur p ON sr.id_prof = p.id_prof
                        JOIN Element_Module em ON sr.id_element = em.id_element
                        JOIN Module m ON em.id_module = m.id_module
                        JOIN Semestre s ON m.id_semestre = s.id_semestre
                        JOIN Annee a ON s.id_annee = a.id_annee
                        JOIN Filiere f ON a.id_filiere = f.id_filiere
                        ORDER BY p.nom, p.prenom, sr.date_seance DESC
                    ");
                    $stmt->execute();
                    $seances = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    
                    // Group by professor and calculate statistics
                    $seancesByProf = [];
                    foreach ($seances as $seance) {
                        $profKey = $seance['id_prof'];
                        if (!isset($seancesByProf[$profKey])) {
                            $seancesByProf[$profKey] = [
                                'prof_info' => [
                                    'id_prof' => $seance['id_prof'],
                                    'nom' => $seance['prof_nom'],
                                    'prenom' => $seance['prof_prenom']
                                ],
                                'seances' => [],
                                'stats' => [
                                    'total' => 0,
                                    'validated' => 0,
                                    'rejected' => 0,
                                    'pending' => 0
                                ]
                            ];
                        }
                        
                        // Add seance to the list
                        $seancesByProf[$profKey]['seances'][] = $seance;
                        
                        // Update statistics
                        $seancesByProf[$profKey]['stats']['total']++;
                        
                        if ($seance['statut'] === null || $seance['statut'] === '') {
                            $seancesByProf[$profKey]['stats']['pending']++;
                        } else if ($seance['statut'] == 1) {
                            $seancesByProf[$profKey]['stats']['validated']++;
                        } else if ($seance['statut'] == 0) {
                            $seancesByProf[$profKey]['stats']['rejected']++;
                        } else {
                            $seancesByProf[$profKey]['stats']['pending']++;
                        }
                    }
                    
                    echo json_encode(['success' => true, 'seancesByProf' => $seancesByProf]);
                    exit;
                
            case 'get_professeurs':
                $stmt = $conn->prepare("
                    SELECT p.id_prof, p.nom, p.prenom 
                    FROM Professeur p 
                    ORDER BY p.nom, p.prenom
                ");
                $stmt->execute();
                $professeurs = $stmt->fetchAll(PDO::FETCH_ASSOC);
                echo json_encode(['success' => true, 'professeurs' => $professeurs]);
                exit;
                
            case 'get_elements':
                $stmt = $conn->prepare("
                    SELECT em.id_element, em.nom_element, m.nom_module,
                           s.nom_semestre, a.annee_universitaire, f.nom_filiere
                    FROM Element_Module em
                    JOIN Module m ON em.id_module = m.id_module
                    JOIN Semestre s ON m.id_semestre = s.id_semestre
                    JOIN Annee a ON s.id_annee = a.id_annee
                    JOIN Filiere f ON a.id_filiere = f.id_filiere
                    ORDER BY f.nom_filiere, a.annee_universitaire, s.nom_semestre, m.nom_module, em.nom_element
                ");
                $stmt->execute();
                $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);
                echo json_encode(['success' => true, 'elements' => $elements]);
                exit;
            
            case 'add_seance':
                $date_seance = $_POST['date_seance'];
                $type_seance = $_POST['type_seance'];
                $id_prof = intval($_POST['id_prof']);
                $id_element = intval($_POST['id_element']);
                
                if (empty($date_seance) || empty($type_seance) || $id_prof <= 0 || $id_element <= 0) {
                    echo json_encode(['success' => false, 'message' => 'Tous les champs sont obligatoires']);
                    exit;
                }
                
                // Check daily limit first
                $dailyCount = checkDailyLimit($conn, $id_prof, $date_seance);
                if ($dailyCount >= 4) {
                    $dateFormatted = date('d/m/Y', strtotime($date_seance));
                    echo json_encode([
                        'success' => false, 
                        'message' => "Limite journalière atteinte ! Ce professeur a déjà 4 séances le $dateFormatted."
                    ]);
                    exit;
                }
                
                // Check monthly limit
                $currentCount = checkMonthlyLimit($conn, $id_prof, $date_seance);
                if ($currentCount >= 20) {
                    $monthName = date('F Y', strtotime($date_seance));
                    echo json_encode([
                        'success' => false, 
                        'message' => "Limite mensuelle atteinte ! Ce professeur a déjà 20 séances en $monthName. Impossible d'ajouter une nouvelle séance."
                    ]);
                    exit;
                }
                
                $stmt = $conn->prepare("INSERT INTO Seance_Reelle (date_seance, type_seance, id_prof, id_element) VALUES (?, ?, ?, ?)");
                $stmt->execute([$date_seance, $type_seance, $id_prof, $id_element]);
                
                $newCount = $currentCount + 1;
                $remaining = 20 - $newCount;
                $monthName = date('F Y', strtotime($date_seance));
                $newDailyCount = $dailyCount + 1;
                $dateFormatted = date('d/m/Y', strtotime($date_seance));
                
                echo json_encode([
                    'success' => true, 
                    'message' => "Séance ajoutée avec succès ! ({$newCount}/20 séances en $monthName, {$remaining} restantes) - ({$newDailyCount}/4 séances le $dateFormatted)"
                ]);
                exit;
                
            case 'delete_seance':
                $id_seance = intval($_POST['id_seance']);
                
                // Check if seance has related records
                $stmt = $conn->prepare("SELECT COUNT(*) FROM Seance_Effective WHERE seance_initiale_id = ?");
                $stmt->execute([$id_seance]);
                if ($stmt->fetchColumn() > 0) {
                    echo json_encode(['success' => false, 'message' => 'Impossible de supprimer cette séance car elle a des séances effectives associées']);
                    exit;
                }
                
                $stmt = $conn->prepare("DELETE FROM Seance_Reelle WHERE id_seance = ?");
                $stmt->execute([$id_seance]);
                
                echo json_encode(['success' => true, 'message' => 'Séance supprimée avec succès']);
                exit;

                case 'get_filieres':
                    $stmt = $conn->prepare("
                        SELECT DISTINCT f.id_filiere, f.nom_filiere
                        FROM Filiere f
                        JOIN Annee a ON f.id_filiere = a.id_filiere
                        JOIN Semestre s ON a.id_annee = s.id_annee
                        JOIN Module m ON s.id_semestre = m.id_module
                        JOIN Element_Module em ON m.id_module = em.id_module
                        ORDER BY f.nom_filiere
                    ");
                    $stmt->execute();
                    $filieres = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    echo json_encode(['success' => true, 'filieres' => $filieres]);
                    exit;
                
                case 'get_annees':
                    $id_filiere = intval($_POST['id_filiere']);
                    $stmt = $conn->prepare("
                        SELECT DISTINCT a.id_annee, a.annee_universitaire, a.niveau
                        FROM Annee a
                        JOIN Semestre s ON a.id_annee = s.id_annee
                        JOIN Module m ON s.id_semestre = m.id_semestre
                        JOIN Element_Module em ON m.id_module = em.id_module
                        WHERE a.id_filiere = ?
                        ORDER BY a.niveau
                    ");
                    $stmt->execute([$id_filiere]);
                    $annees = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    echo json_encode(['success' => true, 'annees' => $annees]);
                    exit;
                
                case 'get_semestres':
                    $id_annee = intval($_POST['id_annee']);
                    $stmt = $conn->prepare("
                        SELECT DISTINCT s.id_semestre, s.nom_semestre
                        FROM Semestre s
                        JOIN Module m ON s.id_semestre = m.id_semestre
                        JOIN Element_Module em ON m.id_module = em.id_module
                        WHERE s.id_annee = ?
                        ORDER BY s.nom_semestre
                    ");
                    $stmt->execute([$id_annee]);
                    $semestres = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    echo json_encode(['success' => true, 'semestres' => $semestres]);
                    exit;
                
                case 'get_modules':
                    $id_semestre = intval($_POST['id_semestre']);
                    $stmt = $conn->prepare("
                        SELECT DISTINCT m.id_module, m.nom_module
                        FROM Module m
                        JOIN Element_Module em ON m.id_module = em.id_module
                        WHERE m.id_semestre = ?
                        ORDER BY m.nom_module
                    ");
                    $stmt->execute([$id_semestre]);
                    $modules = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    echo json_encode(['success' => true, 'modules' => $modules]);
                    exit;
                
                case 'get_seance_details':
                    $id_seance = intval($_POST['id_seance']);
                    $stmt = $conn->prepare("
                        SELECT sr.*, em.id_module, m.id_semestre, s.id_annee, a.id_filiere
                        FROM Seance_Reelle sr
                        JOIN Element_Module em ON sr.id_element = em.id_element
                        JOIN Module m ON em.id_module = m.id_module
                        JOIN Semestre s ON m.id_semestre = s.id_semestre
                        JOIN Annee a ON s.id_annee = a.id_annee
                        WHERE sr.id_seance = ?
                    ");
                    $stmt->execute([$id_seance]);
                    $seance = $stmt->fetch(PDO::FETCH_ASSOC);
                    
                    if ($seance) {
                        echo json_encode(['success' => true, 'seance' => $seance]);
                    } else {
                        echo json_encode(['success' => false, 'message' => 'Séance non trouvée']);
                    }
                    exit;

                case 'get_elements_by_module':
                    $id_module = intval($_POST['id_module']);
                    $stmt = $conn->prepare("
                        SELECT em.id_element, em.nom_element
                        FROM Element_Module em
                        WHERE em.id_module = ?
                        ORDER BY em.nom_element
                    ");
                    $stmt->execute([$id_module]);
                    $elements = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    echo json_encode(['success' => true, 'elements' => $elements]);
                    exit;
                
                    case 'update_seance':
                        $id_seance = intval($_POST['id_seance']);
                        $id_prof = intval($_POST['id_prof']);
                        $id_element = intval($_POST['id_element']);
                        $date_seance = $_POST['date_seance'];
                        $type_seance = $_POST['type_seance'];
                        $id_filiere = intval($_POST['id_filiere']);
                        $id_annee = intval($_POST['id_annee']);
                        $id_semestre = intval($_POST['id_semestre']);
                        $id_module = intval($_POST['id_module']);
                    
                        if ($id_seance <= 0 || $id_prof <= 0 || $id_element <= 0 || empty($date_seance) || empty($type_seance)) {
                            echo json_encode(['success' => false, 'message' => 'Paramètres manquants']);
                            exit;
                        }
                    
                        // Vérifier les limites avant la modification
                        $currentCount = checkMonthlyLimit($conn, $id_prof, $date_seance);
                        if ($currentCount >= 20) {
                            echo json_encode(['success' => false, 'message' => 'Limite mensuelle atteinte pour ce professeur']);
                            exit;
                        }
                    
                        $dailyCount = checkDailyLimit($conn, $id_prof, $date_seance);
                        if ($dailyCount >= 4) {
                            echo json_encode(['success' => false, 'message' => 'Limite quotidienne atteinte pour ce professeur']);
                            exit;
                        }
                    
                        try {
                            $stmt = $conn->prepare("
                                UPDATE Seance_Reelle 
                                SET id_prof = ?, id_element = ?, date_seance = ?, 
                                    type_seance = ?, id_filiere = ?, id_niveau = ?, 
                                    id_semestre = ?, id_module = ?
                                WHERE id_seance = ?
                            ");
                            
                            $stmt->execute([
                                $id_prof, $id_element, $date_seance, $type_seance, 
                                $id_filiere, $id_annee, $id_semestre, $id_module, 
                                $id_seance
                            ]);
                            
                            echo json_encode(['success' => true, 'message' => 'Séance mise à jour avec succès']);
                        } catch (PDOException $e) {
                            echo json_encode(['success' => false, 'message' => 'Erreur de base de données: ' . $e->getMessage()]);
                        }
                        exit;
                
        }
    } catch (Exception $e) {
        echo json_encode(['success' => false, 'message' => 'Erreur: ' . $e->getMessage()]);
        exit;
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Gestion des Séances - ENSIAS</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            background: #f5f5f5;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .back-btn {
            background: #95a5a6;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            display: inline-block;
            margin-bottom: 20px;
        }
        .back-btn:hover {
            background: #7f8c8d;
        }
        .section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin: 2px;
        }
        
        .btn-primary { background: #3498db; color: white; }
        .btn-success { background: #27ae60; color: white; }
        .btn-warning { background: #f39c12; color: white; }
        .btn-danger { background: #e74c3c; color: white; }
        .btn-secondary { background: #95a5a6; color: white; }
        .btn:hover { opacity: 0.8; }
        
        .professor-selector {
            padding: 20px;
            background: #ecf0f1;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .current-prof-info {
            background: #3498db;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .seance-form {
            display: none;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            border: 2px solid #3498db;
        }
        
        .seance-form.active {
            display: block;
        }
        
        .monthly-limit-info {
            background: #e8f4fd;
            border: 2px solid #3498db;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            display: none;
        }
        
        .monthly-limit-info.show {
            display: block;
        }
        
        .limit-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 10px;
        }
        
        .stat-card {
            background: white;
            padding: 10px;
            border-radius: 6px;
            text-align: center;
            border: 1px solid #ddd;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #3498db;
        }
        
        .stat-label {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
        
        .limit-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
        }
        
        .limit-danger {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        
        tr:hover {
            background-color: #f5f5f5;
        }
        
        .professor-section {
            border: 2px solid #3498db;
            border-radius: 8px;
            margin-bottom: 20px;
            overflow: hidden;
        }
        
        .professor-header {
            background: #3498db;
            color: white;
            padding: 15px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
        }
        
        .professor-content {
            padding: 15px;
            background: white;
        }
        
        .professor-content.collapsed {
            display: none;
        }
        
        .badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .badge-cours {
            background-color: #3498db;
            color: white;
        }
        
        .badge-td {
            background-color: #27ae60;
            color: white;
        }
        
        .badge-tp {
            background-color: #f39c12;
            color: white;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        

        .form-inline {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            align-items: end;
            margin-bottom: 15px;
        }
        
        .form-inline.button-row {
            grid-template-columns: 1fr 1fr 120px;
        }
        
        .alert {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
        }
        
        .seance-count {
            background: white;
            color: #3498db;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .toggle-icon {
            transition: transform 0.3s;
        }
        
        .toggle-icon.collapsed {
            transform: rotate(-90deg);
        }
        .badge-validated {
    background-color: #27ae60 !important;
    color: white;
}

.badge-rejected {
    background-color: #e74c3c !important;
    color: white;
}

.badge-pending {
    background-color: #f39c12 !important;
    color: white;
}

.badge {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: bold;
}
    </style>
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>Gestion des Séances par Professeur</h1>
            <p>Limite: 20 séances maximum par professeur par mois</p>
        </div>
    </div>

    <div class="container">
        <a href="admin_dashboard.php" class="back-btn">← Retour au Dashboard</a>

        <!-- Professor Selection Section -->
        <div class="section">
            <h3>Sélection du Professeur</h3>
            <div class="professor-selector">
                <div class="form-group">
                    <label for="select_prof">Choisir un professeur:</label>
                    <select id="select_prof" style="width: 300px;">
                        <option value="">-- Sélectionner un professeur --</option>
                    </select>
                    <button class="btn btn-primary" onclick="selectProfessor()">Commencer la saisie</button>
                </div>
            </div>
        </div>

        <!-- Current Professor and Session Entry -->
        <div id="current-prof-section" style="display: none;">
            <div class="current-prof-info">
                <div>
                    <strong>Professeur actuel:</strong> <span id="current-prof-name"></span>
                </div>
                <button class="btn btn-secondary" onclick="changeProfessor()">Changer de professeur</button>
            </div>

            <!-- Monthly Limit Information -->
            <div id="monthly-limit-info" class="monthly-limit-info">
                <h4>Statistiques mensuelles</h4>
                <div class="limit-stats">
                    <div class="stat-card">
                        <div class="stat-number" id="current-month-count">0</div>
                        <div class="stat-label">Séances ce mois</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="remaining-count">20</div>
                        <div class="stat-label">Séances restantes</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="cours-count">0</div>
                        <div class="stat-label">Cours</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="td-count">0</div>
                        <div class="stat-label">TD</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="tp-count">0</div>
                        <div class="stat-label">TP</div>
                    </div>
                </div>
                <div id="limit-status"></div>
            </div>

            <div class="section">
                <h3>Ajouter des séances</h3>
                <div id="alert-container"></div>
                
                <form id="seanceForm" class="seance-form active">
                <form id="seanceForm" class="seance-form active">
    <div class="form-inline">
        <div class="form-group">
            <label for="date_seance">Date:</label>
            <input type="date" id="date_seance" name="date_seance" required>
        </div>
        <div class="form-group">
            <label for="type_seance">Type:</label>
            <select id="type_seance" name="type_seance" required>
                <option value="">Type</option>
                <option value="Cours">Cours</option>
                <option value="TD">TD</option>
                <option value="TP">TP</option>
            </select>
        </div>
        <div></div> <!-- Colonne vide pour l'alignement -->
    </div>
    
    <div class="form-inline">
        <div class="form-group">
            <label for="id_filiere">Filière:</label>
            <select id="id_filiere" name="id_filiere" required>
                <option value="">Sélectionner une filière</option>
            </select>
        </div>
        <div class="form-group">
            <label for="id_annee">Niveau:</label>
            <select id="id_annee" name="id_annee" required disabled>
                <option value="">Sélectionner un niveau</option>
            </select>
        </div>
        <div class="form-group">
            <label for="id_semestre">Semestre:</label>
            <select id="id_semestre" name="id_semestre" required disabled>
                <option value="">Sélectionner un semestre</option>
            </select>
        </div>
    </div>
    
    <div class="form-inline button-row">
        <div class="form-group">
            <label for="id_module">Module:</label>
            <select id="id_module" name="id_module" required disabled>
                <option value="">Sélectionner un module</option>
            </select>
        </div>
        <div class="form-group">
            <label for="id_element">Élément:</label>
            <select id="id_element" name="id_element" required disabled>
                <option value="">Sélectionner un élément</option>
            </select>
        </div>
        <div class="form-group">
            <label>&nbsp;</label>
            <button type="submit" class="btn btn-success" id="add-seance-btn">Ajouter</button>
        </div>
    </div>
</form>
            </div>
        </div>

        <!-- Sessions Display Section -->
        <div class="section">
            <h3>Séances Enregistrées par Professeur</h3>
            <button class="btn btn-primary" onclick="refreshSeances()">Actualiser</button>
            
            <div id="seances-display-container">
                <div class="loading">Chargement des séances...</div>
            </div>
        </div>
    </div>

    <script>
        let professeurs = [];
        let elements = [];
        let currentProfId = null;
        let seancesByProf = {};

        document.addEventListener('DOMContentLoaded', function() {
            loadProfesseurs();
            loadElements();
            loadSeances();
            
            // Date change handler with monthly limit check
            const dateInput = document.getElementById('date_seance');
            if (dateInput) {
                dateInput.addEventListener('change', function() {
                    checkDate(this.value);
                    if (currentProfId) {
                        checkMonthlyLimit(currentProfId, this.value);
                    }
                });
            }
            
            // Set default date to today
            document.getElementById('date_seance').valueAsDate = new Date();
        });

        document.getElementById('id_filiere').addEventListener('change', function() {
    if (this.value) {
        loadAnnees(this.value);
    } else {
        resetSelect('id_annee');
        resetSelect('id_semestre');
        resetSelect('id_module');
        resetSelect('id_element');
    }
});

document.getElementById('id_annee').addEventListener('change', function() {
    if (this.value) {
        loadSemestres(this.value);
    } else {
        resetSelect('id_semestre');
        resetSelect('id_module');
        resetSelect('id_element');
    }
});

document.getElementById('id_semestre').addEventListener('change', function() {
    if (this.value) {
        loadModules(this.value);
    } else {
        resetSelect('id_module');
        resetSelect('id_element');
    }
});

document.getElementById('id_module').addEventListener('change', function() {
    if (this.value) {
        loadElementsByModule(this.value);
    } else {
        resetSelect('id_element');
    }
});

        function loadProfesseurs() {
            fetch('', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'action=get_professeurs'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    professeurs = data.professeurs;
                    populateProfSelect();
                }
            })
            .catch(error => {
                console.error('Error loading professeurs:', error);
            });
        }

        function loadElements() {
    loadFilieres();
}

function loadFilieres() {
    fetch('', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'action=get_filieres'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            populateFiliereSelect(data.filieres);
        }
    })
    .catch(error => {
        console.error('Error loading filieres:', error);
    });
}

function populateFiliereSelect(filieres) {
    const select = document.getElementById('id_filiere');
    select.innerHTML = '<option value="">Sélectionner une filière</option>';
    
    filieres.forEach(filiere => {
        const option = document.createElement('option');
        option.value = filiere.id_filiere;
        option.textContent = filiere.nom_filiere;
        select.appendChild(option);
    });
}

function loadAnnees(id_filiere) {
    const formData = new FormData();
    formData.append('action', 'get_annees');
    formData.append('id_filiere', id_filiere);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            populateAnneeSelect(data.annees);
            // Reset dependent selects
            resetSelect('id_semestre');
            resetSelect('id_module');
            resetSelect('id_element');
        }
    })
    .catch(error => {
        console.error('Error loading annees:', error);
    });
}

function loadSemestres(id_annee) {
    const formData = new FormData();
    formData.append('action', 'get_semestres');
    formData.append('id_annee', id_annee);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            populateSemestreSelect(data.semestres);
            // Reset dependent selects
            resetSelect('id_module');
            resetSelect('id_element');
        }
    })
    .catch(error => {
        console.error('Error loading semestres:', error);
    });
}

function loadModules(id_semestre) {
    const formData = new FormData();
    formData.append('action', 'get_modules');
    formData.append('id_semestre', id_semestre);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            populateModuleSelect(data.modules);
            // Reset dependent select
            resetSelect('id_element');
        }
    })
    .catch(error => {
        console.error('Error loading modules:', error);
    });
}

function loadElementsByModule(id_module) {
    const formData = new FormData();
    formData.append('action', 'get_elements_by_module');
    formData.append('id_module', id_module);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            populateElementSelect(data.elements);
        }
    })
    .catch(error => {
        console.error('Error loading elements:', error);
    });
}

function populateAnneeSelect(annees) {
    const select = document.getElementById('id_annee');
    select.innerHTML = '<option value="">Sélectionner un niveau</option>';
    select.disabled = false;
    
    annees.forEach(annee => {
        const option = document.createElement('option');
        option.value = annee.id_annee;
        // Utiliser le niveau au lieu de l'année universitaire
        option.textContent = annee.niveau;
        select.appendChild(option);
    });
}

function populateSemestreSelect(semestres) {
    const select = document.getElementById('id_semestre');
    select.innerHTML = '<option value="">Sélectionner un semestre</option>';
    select.disabled = false;
    
    semestres.forEach(semestre => {
        const option = document.createElement('option');
        option.value = semestre.id_semestre;
        option.textContent = semestre.nom_semestre;
        select.appendChild(option);
    });
}

function populateModuleSelect(modules) {
    const select = document.getElementById('id_module');
    select.innerHTML = '<option value="">Sélectionner un module</option>';
    select.disabled = false;
    
    modules.forEach(module => {
        const option = document.createElement('option');
        option.value = module.id_module;
        option.textContent = module.nom_module;
        select.appendChild(option);
    });
}


        function loadSeances() {
            fetch('', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'action=get_seances_by_prof'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    seancesByProf = data.seancesByProf;
                    displaySeancesByProf();
                } else {
                    showAlert('Erreur lors du chargement des séances', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Erreur de connexion', 'error');
            });
        }

        function checkMonthlyLimit(profId, date) {
    if (!profId || !date) return;
    
    // Check monthly limit
    const monthlyFormData = new FormData();
    monthlyFormData.append('action', 'check_monthly_limit');
    monthlyFormData.append('id_prof', profId);
    monthlyFormData.append('date_seance', date);

    fetch('', {
        method: 'POST',
        body: monthlyFormData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateMonthlyLimitDisplay(data);
        }
    })
    .catch(error => {
        console.error('Error checking monthly limit:', error);
    });

    // Check daily limit
    const dailyFormData = new FormData();
    dailyFormData.append('action', 'check_daily_limit');
    dailyFormData.append('id_prof', profId);
    dailyFormData.append('date_seance', date);

    fetch('', {
        method: 'POST',
        body: dailyFormData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateDailyLimitCheck(data);
        }
    })
    .catch(error => {
        console.error('Error checking daily limit:', error);
    });
}

// Nouvelle fonction pour gérer l'affichage de la limite journalière
function updateDailyLimitCheck(data) {
    const addBtn = document.getElementById('add-seance-btn');
    const limitStatus = document.getElementById('limit-status');
    
    if (data.daily_limit_reached) {
        // Si la limite journalière est atteinte, désactiver le bouton
        addBtn.disabled = true;
        addBtn.textContent = 'Limite journalière atteinte';
        addBtn.style.opacity = '0.5';
        
        // Ajouter un message d'avertissement pour la limite journalière
        const currentStatus = limitStatus.innerHTML;
        limitStatus.innerHTML = currentStatus + `
            <div class="limit-danger" style="margin-top: 10px;">
                <strong>⚠️ Limite journalière atteinte !</strong> Ce professeur a déjà 4 séances le ${data.date_formatted}.
            </div>
        `;
    } else if (data.daily_count >= 3) {
        // Si proche de la limite journalière, afficher un avertissement
        const currentStatus = limitStatus.innerHTML;
        limitStatus.innerHTML = currentStatus + `
            <div class="limit-warning" style="margin-top: 10px;">
                <strong>⚠️ Attention !</strong> Ce professeur a déjà ${data.daily_count}/4 séances le ${data.date_formatted}.
            </div>
        `;
    }
}

function updateMonthlyLimitDisplay(data) {
    const limitInfo = document.getElementById('monthly-limit-info');
    const limitStatus = document.getElementById('limit-status');
    const addBtn = document.getElementById('add-seance-btn');
    
    // Update statistics
    document.getElementById('current-month-count').textContent = data.current_count || 0;
    document.getElementById('remaining-count').textContent = data.remaining || 0;
    document.getElementById('cours-count').textContent = data.stats.cours_count || 0;
    document.getElementById('td-count').textContent = data.stats.td_count || 0;
    document.getElementById('tp-count').textContent = data.stats.tp_count || 0;
    
    // Show the limit info section
    limitInfo.classList.add('show');
    
    // Update status for monthly limit only
    if (data.limit_reached) {
        limitStatus.innerHTML = `<div class="limit-danger">
            <strong>⚠️ Limite mensuelle atteinte !</strong> Ce professeur a déjà atteint la limite de 20 séances pour ${data.month}.
        </div>`;
        addBtn.disabled = true;
        addBtn.textContent = 'Limite mensuelle atteinte';
        addBtn.style.opacity = '0.5';
    } else if (data.current_count >= 18) {
        limitStatus.innerHTML = `<div class="limit-warning">
            <strong>⚠️ Attention !</strong> Ce professeur approche de la limite mensuelle (${data.current_count}/20 séances en ${data.month}).
        </div>`;
        // Ne pas désactiver le bouton ici, la vérification journalière s'en chargera si nécessaire
        addBtn.disabled = false;
        addBtn.textContent = 'Ajouter';
        addBtn.style.opacity = '1';
    } else {
        limitStatus.innerHTML = `<div style="color: #27ae60;">
            <br/>${data.remaining} séances restantes pour ${data.month}.
        </div>`;
        // Ne pas réactiver automatiquement le bouton, la vérification journalière peut l'avoir désactivé
        if (!addBtn.disabled || addBtn.textContent === 'Limite mensuelle atteinte') {
            addBtn.disabled = false;
            addBtn.textContent = 'Ajouter';
            addBtn.style.opacity = '1';
        }
    }
}

        function getStatutBadge(statut) {
            if (statut === null || statut === '') {
                return '<span class="badge badge-pending">En attente</span>';
            } else if (statut == 1) {
                return '<span class="badge badge-validated">Validé</span>';
            } else if (statut == 0) {
                return '<span class="badge badge-rejected">Non validé</span>';
            }
            return '<span class="badge badge-pending">En attente</span>';
        }

        function populateProfSelect() {
            const select = document.getElementById('select_prof');
            select.innerHTML = '<option value="">-- Sélectionner un professeur --</option>';
            
            professeurs.forEach(prof => {
                const option = document.createElement('option');
                option.value = prof.id_prof;
                option.textContent = `${prof.nom} ${prof.prenom}`;
                select.appendChild(option);
            });
        }

        function populateElementSelect(elements) {
    const select = document.getElementById('id_element');
    select.innerHTML = '<option value="">Sélectionner un élément</option>';
    select.disabled = false;
    
    elements.forEach(element => {
        const option = document.createElement('option');
        option.value = element.id_element;
        option.textContent = element.nom_element;
        select.appendChild(option);
    });
}

function resetSelect(selectId) {
    const select = document.getElementById(selectId);
    if (select) {
        select.innerHTML = '<option value="">Sélectionner...</option>';
        select.disabled = true;
    }
    
    // Si c'est un select avec préfixe "edit_", on le gère aussi
    const editSelect = document.getElementById('edit_' + selectId);
    if (editSelect) {
        editSelect.innerHTML = '<option value="">Sélectionner...</option>';
        editSelect.disabled = true;
    }
}

// 1. Modifier la fonction selectProfessor() pour filtrer les séances
function selectProfessor() {
    const selectProf = document.getElementById('select_prof');
    const profId = selectProf.value;
    
    if (!profId) {
        showAlert('Veuillez sélectionner un professeur', 'error');
        return;
    }
    
    currentProfId = profId;
    const selectedProf = professeurs.find(p => p.id_prof == profId);
    
    document.getElementById('current-prof-name').textContent = `${selectedProf.nom} ${selectedProf.prenom}`;
    document.getElementById('current-prof-section').style.display = 'block';
    
    // Reset form
    document.getElementById('seanceForm').reset();
    const today = new Date();
    document.getElementById('date_seance').valueAsDate = today;
    
    resetSelect('id_annee');
    resetSelect('id_semestre');
    resetSelect('id_module');
    resetSelect('id_element');
    
    // Check monthly limit for current date
    checkMonthlyLimit(profId, today.toISOString().split('T')[0]);
    
    // NOUVELLE LIGNE: Filtrer et afficher seulement les séances de ce professeur
    displayFilteredSeancesByProf(profId);
}

// 2. Ajouter cette nouvelle fonction pour afficher les séances filtrées
function displayFilteredSeancesByProf(selectedProfId) {
    const container = document.getElementById('seances-display-container');
    
    const filteredSeances = {};
    if (seancesByProf[selectedProfId]) {
        filteredSeances[selectedProfId] = seancesByProf[selectedProfId];
    }
    
    if (Object.keys(filteredSeances).length === 0) {
        container.innerHTML = '<p>Aucune séance trouvée pour ce professeur.</p>';
        return;
    }

    let html = '';

    Object.entries(filteredSeances).forEach(([profId, profData]) => {
        const profInfo = profData.prof_info;
        const seances = profData.seances;
        const stats = profData.stats || { total: 0, validated: 0, rejected: 0, pending: 0 };
        const isCollapsed = false;
        
        html += `
            <div class="professor-section">
                <div class="professor-header" onclick="toggleProfessorSection(${profId})">
                    <div>
                        <strong>${profInfo.nom} ${profInfo.prenom}</strong>

                    </div>
                    <div>
                        <span class="seance-count">${stats.total} séance(s)</span>
                        <span class="toggle-icon ${isCollapsed ? 'collapsed' : ''}" id="toggle-${profId}">▼</span>
                    </div>
                </div>
                <div class="professor-content ${isCollapsed ? 'collapsed' : ''}" id="content-${profId}">
                    <!-- Statistiques détaillées -->
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin-bottom: 15px;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; text-align: center;">
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #3498db;">${stats.total}</div>
                                <div style="font-size: 12px; color: #666;">Total</div>
                            </div>
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #27ae60;">${stats.validated}</div>
                                <div style="font-size: 12px; color: #666;">Validées</div>
                            </div>
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #e74c3c;">${stats.rejected}</div>
                                <div style="font-size: 12px; color: #666;">Non validées</div>
                            </div>
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #f39c12;">${stats.pending}</div>
                                <div style="font-size: 12px; color: #666;">En attente</div>
                            </div>
                        </div>
                    </div>
        `;
        
        if (seances.length > 0) {
            html += `
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Élément</th>
                            <th>Module</th>
                            <th>Filière/Niveau</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            seances.forEach(seance => {
                const typeClass = seance.type_seance === 'Cours' ? 'badge-cours' : 
                                 seance.type_seance === 'TD' ? 'badge-td' : 'badge-tp';
                
                let statutBadge = '';
                if (seance.statut === null || seance.statut === '' || seance.statut === undefined) {
                    statutBadge = '<span class="badge badge-pending">En attente</span>';
                } else if (seance.statut == 1) {
                    statutBadge = '<span class="badge badge-validated">Validé</span>';
                } else if (seance.statut == 0) {
                    statutBadge = '<span class="badge badge-rejected">Non validé</span>';
                } else {
                    statutBadge = '<span class="badge badge-pending">En attente</span>';
                }
                
                html += `
                    <tr>
                        <td>${new Date(seance.date_seance).toLocaleDateString()}</td>
                        <td><span class="badge ${typeClass}">${seance.type_seance}</span></td>
                        <td>${seance.nom_element}</td>
                        <td>${seance.nom_module}</td>
                        <td>${seance.nom_filiere} - ${seance.niveau}</td>
                        <td>${statutBadge}</td>
                        <td>
                            <button class="btn btn-edit" onclick="editSeance(${seance.id_seance})">
                                Modifier
                            </button>
                            <button class="btn btn-danger" onclick="deleteSeance(${seance.id_seance}, '${seance.nom_element}')">
                                Supprimer
                            </button>
                        </td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
            `;
        } else {
            html += '<p>Aucune séance enregistrée pour ce professeur.</p>';
        }
        
        html += `
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
}

// 3. Modifier la fonction changeProfessor() pour revenir à l'affichage complet
function changeProfessor() {
    currentProfId = null;
    document.getElementById('current-prof-section').style.display = 'none';
    document.getElementById('monthly-limit-info').classList.remove('show');
    document.getElementById('select_prof').value = '';
    
    // NOUVELLE LIGNE: Revenir à l'affichage de toutes les séances
    displaySeancesByProf();
}


function displaySeancesByProf() {
    const container = document.getElementById('seances-display-container');
    
    if (Object.keys(seancesByProf).length === 0) {
        container.innerHTML = '<p>Aucune séance trouvée.</p>';
        return;
    }

    let html = '';

    Object.entries(seancesByProf).forEach(([profId, profData]) => {
        const profInfo = profData.prof_info;
        const seances = profData.seances;
        const stats = profData.stats || { total: 0, validated: 0, rejected: 0, pending: 0 };
        const isCollapsed = false;
        
        html += `
            <div class="professor-section">
                <div class="professor-header" onclick="toggleProfessorSection(${profId})">
                    <div>
                        <strong>${profInfo.nom} ${profInfo.prenom}</strong>

                    </div>
                    <div>
                        <span class="seance-count">${stats.total} séance(s)</span>
                        <span class="toggle-icon ${isCollapsed ? 'collapsed' : ''}" id="toggle-${profId}">▼</span>
                    </div>
                </div>
                <div class="professor-content ${isCollapsed ? 'collapsed' : ''}" id="content-${profId}">
                    <!-- Statistiques détaillées -->
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin-bottom: 15px;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; text-align: center;">
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #3498db;">${stats.total}</div>
                                <div style="font-size: 12px; color: #666;">Total</div>
                            </div>
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #27ae60;">${stats.validated}</div>
                                <div style="font-size: 12px; color: #666;">Validées</div>
                            </div>
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #e74c3c;">${stats.rejected}</div>
                                <div style="font-size: 12px; color: #666;">Non validées</div>
                            </div>
                            <div>
                                <div style="font-size: 20px; font-weight: bold; color: #f39c12;">${stats.pending}</div>
                                <div style="font-size: 12px; color: #666;">En attente</div>
                            </div>
                        </div>
                    </div>
        `;
        
        if (seances.length > 0) {
            html += `
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Élément</th>
                            <th>Module</th>
                            <th>Filière/Niveau</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            seances.forEach(seance => {
                const typeClass = seance.type_seance === 'Cours' ? 'badge-cours' : 
                                 seance.type_seance === 'TD' ? 'badge-td' : 'badge-tp';
                
                let statutBadge = '';
                if (seance.statut === null || seance.statut === '' || seance.statut === undefined) {
                    statutBadge = '<span class="badge badge-pending">En attente</span>';
                } else if (seance.statut == 1) {
                    statutBadge = '<span class="badge badge-validated">Validé</span>';
                } else if (seance.statut == 0) {
                    statutBadge = '<span class="badge badge-rejected">Non validé</span>';
                } else {
                    statutBadge = '<span class="badge badge-pending">En attente</span>';
                }
                
                html += `
                    <tr>
                        <td>${new Date(seance.date_seance).toLocaleDateString()}</td>
                        <td><span class="badge ${typeClass}">${seance.type_seance}</span></td>
                        <td>${seance.nom_element}</td>
                        <td>${seance.nom_module}</td>
                        <td>${seance.nom_filiere} - ${seance.niveau}</td>
                        <td>${statutBadge}</td>
                        <td>
                            <button class="btn btn-edit" onclick="editSeance(${seance.id_seance})">
                                Modifier
                            </button>
                            <button class="btn btn-danger" onclick="deleteSeance(${seance.id_seance}, '${seance.nom_element}')">
                                Supprimer
                            </button>
                        </td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
            `;
        } else {
            html += '<p>Aucune séance enregistrée pour ce professeur.</p>';
        }
        
        html += `
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
}

        function toggleProfessorSection(profId) {
            const content = document.getElementById(`content-${profId}`);
            const toggle = document.getElementById(`toggle-${profId}`);
            
            content.classList.toggle('collapsed');
            toggle.classList.toggle('collapsed');
        }

        function checkDate(date) {
            fetch('check_date.php?date=' + date)
                .then(response => response.json())
                .then(data => {
                    if (data.blocked) {
                        alert('Cette date est un ' + (data.type === 'ferie' ? 'jour férié' : 'jour de grève'));
                        document.getElementById('date_seance').value = '';
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Erreur lors de la vérification de la date');
                });
        }

// Gestion des changements de filière dans le formulaire de modification
document.getElementById('edit_id_filiere').addEventListener('change', function() {
    if (this.value) {
        loadAnneesForEdit(this.value, null, null, null, null);
    } else {
        resetSelect('edit_id_annee');
        resetSelect('edit_id_semestre');
        resetSelect('edit_id_module');
        resetSelect('edit_id_element');
    }
});

document.getElementById('edit_id_annee').addEventListener('change', function() {
    if (this.value) {
        loadSemestresForEdit(this.value, null, null, null);
    } else {
        resetSelect('edit_id_semestre');
        resetSelect('edit_id_module');
        resetSelect('edit_id_element');
    }
});

document.getElementById('edit_id_semestre').addEventListener('change', function() {
    if (this.value) {
        loadModulesForEdit(this.value, null, null);
    } else {
        resetSelect('edit_id_module');
        resetSelect('edit_id_element');
    }
});

document.getElementById('edit_id_module').addEventListener('change', function() {
    if (this.value) {
        loadElementsForEdit(this.value, null);
    } else {
        resetSelect('edit_id_element');
    }
});

        // Handle seance form submission
document.getElementById('seanceForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!currentProfId) {
        showAlert('Aucun professeur sélectionné', 'error');
        return;
    }
    
    const formData = new FormData(this);
    formData.append('action', 'add_seance');
    formData.append('id_prof', currentProfId);

    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert(data.message, 'success');
            // Reset only some fields, keep professor and date
            document.getElementById('type_seance').value = '';
            document.getElementById('id_element').value = '';
            loadSeances(); // Refresh the display
            
            // MODIFICATION: Après le rechargement, filtrer à nouveau par le professeur actuel
            setTimeout(() => {
                if (currentProfId) {
                    displayFilteredSeancesByProf(currentProfId);
                }
            }, 100);
            
            // Update monthly limit info
            const date = document.getElementById('date_seance').value;
            checkMonthlyLimit(currentProfId, date);
        } else {
            showAlert(data.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('Erreur lors de l\'ajout de la séance', 'error');
    });
});

// 5. Modifier la fonction deleteSeance pour maintenir le filtre
function deleteSeance(seanceId, seanceName) {
    if (confirm(`Êtes-vous sûr de vouloir supprimer la séance pour "${seanceName}" ?`)) {
        const formData = new FormData();
        formData.append('action', 'delete_seance');
        formData.append('id_seance', seanceId);

        fetch('', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert(data.message, 'success');
                loadSeances();
                
                // MODIFICATION: Après le rechargement, filtrer à nouveau par le professeur actuel
                setTimeout(() => {
                    if (currentProfId) {
                        displayFilteredSeancesByProf(currentProfId);
                    }
                }, 100);
                
                // Update monthly limit info if a professor is selected
                if (currentProfId) {
                    const date = document.getElementById('date_seance').value;
                    checkMonthlyLimit(currentProfId, date);
                }
            } else {
                showAlert(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Erreur lors de la suppression de la séance', 'error');
        });
    }
}

        function refreshSeances() {
            loadSeances();
            showAlert('Liste des séances actualisée', 'success');
        }

        function showAlert(message, type) {
            const container = document.getElementById('alert-container');
            const alertClass = type === 'success' ? 'alert-success' : 'alert-error';
            
            container.innerHTML = `<div class="alert ${alertClass}">${message}</div>`;
            
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }
        
function editSeance(id_seance) {
    if (!id_seance) {
        showAlert('ID de séance invalide', 'error');
        return;
    }

    const formData = new FormData();
    formData.append('action', 'get_seance_details');
    formData.append('id_seance', id_seance);

    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Erreur serveur');
        }
        return response.json();
    })
    .then(data => {
        if (!data.success) {
            throw new Error(data.message || 'Erreur inconnue');
        }
        
        const seance = data.seance;
        if (!seance) {
            throw new Error('Séance non trouvée');
        }
        
        // Créer le formulaire de modification
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
        modal.style.display = 'flex';
        modal.style.justifyContent = 'center';
        modal.style.alignItems = 'center';
        modal.style.zIndex = '1000';
        
        // Charger les professeurs
        fetch('', {
            method: 'POST',
            body: new FormData().append('action', 'get_professeurs')
        })
        .then(response => response.json())
        .then(profsData => {
            if (!profsData.success) {
                throw new Error(profsData.message || 'Erreur lors du chargement des professeurs');
            }
            
            const professeurs = profsData.professeurs;
            
            modal.innerHTML = `
                <div class="modal-content" style="background: white; padding: 20px; border-radius: 8px; max-width: 600px; width: 100%;">
                    <h2>Modifier la Séance</h2>
                    <form id="edit-seance-form">
                        <input type="hidden" name="action" value="update_seance">
                        <input type="hidden" name="id_seance" value="${seance.id_seance}">
                        
                        <div class="form-group">
                            <label for="edit_id_prof">Professeur:</label>
                            <select id="edit_id_prof" name="id_prof" required>
                                ${professeurs.map(p => 
                                    `<option value="${p.id_prof}" ${p.id_prof == seance.id_prof ? 'selected' : ''}>
                                        ${p.nom} ${p.prenom}
                                    </option>`
                                ).join('')}
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_date_seance">Date:</label>
                            <input type="date" id="edit_date_seance" name="date_seance" required value="${seance.date_seance}">
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_type_seance">Type:</label>
                            <select id="edit_type_seance" name="type_seance" required>
                                <option value="Cours" ${seance.type_seance === 'Cours' ? 'selected' : ''}>Cours</option>
                                <option value="TD" ${seance.type_seance === 'TD' ? 'selected' : ''}>TD</option>
                                <option value="TP" ${seance.type_seance === 'TP' ? 'selected' : ''}>TP</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_id_filiere">Filière:</label>
                            <select id="edit_id_filiere" name="id_filiere" required>
                                <option value="">Sélectionner une filière</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_id_annee">Niveau:</label>
                            <select id="edit_id_annee" name="id_annee" required disabled>
                                <option value="">Sélectionner un niveau</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_id_semestre">Semestre:</label>
                            <select id="edit_id_semestre" name="id_semestre" required disabled>
                                <option value="">Sélectionner un semestre</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_id_module">Module:</label>
                            <select id="edit_id_module" name="id_module" required disabled>
                                <option value="">Sélectionner un module</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit_id_element">Élément:</label>
                            <select id="edit_id_element" name="id_element" required disabled>
                                <option value="">Sélectionner un élément</option>
                            </select>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">Modifier</button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal(this)">Annuler</button>
                    </form>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Charger la hiérarchie complète
            loadFilieresForEdit(seance.id_filiere, seance.id_annee, seance.id_semestre, seance.id_module, seance.id_element);
            
            // Gérer la soumission du formulaire
            document.getElementById('edit-seance-form').addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch('', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        closeModal(modal);
                        loadSeances();
                        showAlert('Séance modifiée avec succès', 'success');
                    } else {
                        showAlert(data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Erreur lors de la modification de la séance', 'error');
                });
            });
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('Erreur lors du chargement des professeurs', 'error');
        });
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('Erreur lors de la récupération des détails de la séance', 'error');
    });
}

function loadFilieresForEdit(id_filiere, id_annee, id_semestre, id_module, id_element) {
    // Charger les filières
    fetch('', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'action=get_filieres'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const select = document.getElementById('edit_id_filiere');
            select.innerHTML = '<option value="">Sélectionner une filière</option>';
            
            data.filieres.forEach(filiere => {
                const option = document.createElement('option');
                option.value = filiere.id_filiere;
                option.textContent = filiere.nom_filiere;
                if (filiere.id_filiere == id_filiere) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
            
            // Activer le champ et charger les années
            select.disabled = false;
            loadAnneesForEdit(id_filiere, id_annee, id_semestre, id_module, id_element);
        }
    });
}

function loadAnneesForEdit(id_filiere, id_annee, id_semestre, id_module, id_element) {
    const formData = new FormData();
    formData.append('action', 'get_annees');
    formData.append('id_filiere', id_filiere);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const select = document.getElementById('edit_id_annee');
            select.innerHTML = '<option value="">Sélectionner un niveau</option>';
            select.disabled = false;
            
            data.annees.forEach(annee => {
                const option = document.createElement('option');
                option.value = annee.id_annee;
                option.textContent = annee.niveau;
                if (annee.id_annee == id_annee) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
            
            // Activer le champ et charger les semestres
            loadSemestresForEdit(id_annee, id_semestre, id_module, id_element);
        }
    });
}

function loadSemestresForEdit(id_annee, id_semestre, id_module, id_element) {
    const formData = new FormData();
    formData.append('action', 'get_semestres');
    formData.append('id_annee', id_annee);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const select = document.getElementById('edit_id_semestre');
            select.innerHTML = '<option value="">Sélectionner un semestre</option>';
            select.disabled = false;
            
            data.semestres.forEach(semestre => {
                const option = document.createElement('option');
                option.value = semestre.id_semestre;
                option.textContent = semestre.nom_semestre;
                if (semestre.id_semestre == id_semestre) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
            
            // Activer le champ et charger les modules
            loadModulesForEdit(id_semestre, id_module, id_element);
        }
    });
}

function loadModulesForEdit(id_semestre, id_module, id_element) {
    const formData = new FormData();
    formData.append('action', 'get_modules');
    formData.append('id_semestre', id_semestre);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const select = document.getElementById('edit_id_module');
            select.innerHTML = '<option value="">Sélectionner un module</option>';
            select.disabled = false;
            
            data.modules.forEach(module => {
                const option = document.createElement('option');
                option.value = module.id_module;
                option.textContent = module.nom_module;
                if (module.id_module == id_module) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
            
            // Activer le champ et charger les éléments
            loadElementsForEdit(id_module, id_element);
        }
    });
}

function loadElementsForEdit(id_module, id_element) {
    const formData = new FormData();
    formData.append('action', 'get_elements_by_module');
    formData.append('id_module', id_module);
    
    fetch('', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const select = document.getElementById('edit_id_element');
            select.innerHTML = '<option value="">Sélectionner un élément</option>';
            select.disabled = false;
            
            data.elements.forEach(element => {
                const option = document.createElement('option');
                option.value = element.id_element;
                option.textContent = element.nom_element;
                if (element.id_element == id_element) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
        }
    });
}

function closeModal(element) {
    const modal = element.closest('.modal');
    if (modal) {
        modal.remove();
    }
}

        function closeModal(button) {
            const modal = button.closest('.modal');
            if (modal) {
                modal.remove();
            }
        }

        function generateProfessorOptions() {
            let options = '';
            professeurs.forEach(prof => {
                options += `<option value="${prof.id_prof}">${prof.nom} ${prof.prenom}</option>`;
            });
            return options;
        }

        function generateElementOptions(id_module) {
            let options = '';
            elements.forEach(element => {
                if (element.id_module === id_module) {
                    options += `<option value="${element.id_element}">${element.nom_element}</option>`;
                }
            });
            return options;
        }

        function generateFiliereOptions() {
            let options = '';
            filieres.forEach(filiere => {
                options += `<option value="${filiere.id_filiere}">${filiere.nom_filiere}</option>`;
            });
            return options;
        }

        function generateNiveauOptions() {
            let options = '';
            niveaux.forEach(niveau => {
                options += `<option value="${niveau.id_niveau}">${niveau.niveau}</option>`;
            });
            return options;
        }

        function generateSemestreOptions() {
            let options = '';
            semestres.forEach(semestre => {
                options += `<option value="${semestre.id_semestre}">${semestre.nom_semestre}</option>`;
            });
            return options;
        }
    </script>
</body>
</html>